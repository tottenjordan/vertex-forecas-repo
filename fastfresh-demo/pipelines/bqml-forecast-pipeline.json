{
  "pipelineSpec": {
    "components": {
      "comp-bigquery-create-model-job": {
        "executorLabel": "exec-bigquery-create-model-job",
        "inputDefinitions": {
          "parameters": {
            "job_configuration_query": {
              "type": "STRING"
            },
            "labels": {
              "type": "STRING"
            },
            "location": {
              "type": "STRING"
            },
            "project": {
              "type": "STRING"
            },
            "query": {
              "type": "STRING"
            },
            "query_parameters": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "model": {
              "artifactType": {
                "schemaTitle": "google.BQMLModel",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "gcp_resources": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-bigquery-create-model-job-2": {
        "executorLabel": "exec-bigquery-create-model-job-2",
        "inputDefinitions": {
          "parameters": {
            "job_configuration_query": {
              "type": "STRING"
            },
            "labels": {
              "type": "STRING"
            },
            "location": {
              "type": "STRING"
            },
            "project": {
              "type": "STRING"
            },
            "query": {
              "type": "STRING"
            },
            "query_parameters": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "model": {
              "artifactType": {
                "schemaTitle": "google.BQMLModel",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "gcp_resources": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-bigquery-evaluate-model-job": {
        "executorLabel": "exec-bigquery-evaluate-model-job",
        "inputDefinitions": {
          "artifacts": {
            "model": {
              "artifactType": {
                "schemaTitle": "google.BQMLModel",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "job_configuration_query": {
              "type": "STRING"
            },
            "labels": {
              "type": "STRING"
            },
            "location": {
              "type": "STRING"
            },
            "project": {
              "type": "STRING"
            },
            "query_parameters": {
              "type": "STRING"
            },
            "query_statement": {
              "type": "STRING"
            },
            "table_name": {
              "type": "STRING"
            },
            "threshold": {
              "type": "DOUBLE"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "evaluation_metrics": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "gcp_resources": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-bigquery-explain-forecast-model-job": {
        "executorLabel": "exec-bigquery-explain-forecast-model-job",
        "inputDefinitions": {
          "artifacts": {
            "model": {
              "artifactType": {
                "schemaTitle": "google.BQMLModel",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "confidence_level": {
              "type": "DOUBLE"
            },
            "horizon": {
              "type": "INT"
            },
            "job_configuration_query": {
              "type": "STRING"
            },
            "labels": {
              "type": "STRING"
            },
            "location": {
              "type": "STRING"
            },
            "project": {
              "type": "STRING"
            },
            "query_parameters": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "destination_table": {
              "artifactType": {
                "schemaTitle": "google.BQTable",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "gcp_resources": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-bigquery-forecast-model-job": {
        "executorLabel": "exec-bigquery-forecast-model-job",
        "inputDefinitions": {
          "artifacts": {
            "model": {
              "artifactType": {
                "schemaTitle": "google.BQMLModel",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "confidence_level": {
              "type": "DOUBLE"
            },
            "horizon": {
              "type": "INT"
            },
            "job_configuration_query": {
              "type": "STRING"
            },
            "labels": {
              "type": "STRING"
            },
            "location": {
              "type": "STRING"
            },
            "project": {
              "type": "STRING"
            },
            "query_parameters": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "destination_table": {
              "artifactType": {
                "schemaTitle": "google.BQTable",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "gcp_resources": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-bigquery-ml-arima-evaluate-job": {
        "executorLabel": "exec-bigquery-ml-arima-evaluate-job",
        "inputDefinitions": {
          "artifacts": {
            "model": {
              "artifactType": {
                "schemaTitle": "google.BQMLModel",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "job_configuration_query": {
              "type": "STRING"
            },
            "labels": {
              "type": "STRING"
            },
            "location": {
              "type": "STRING"
            },
            "project": {
              "type": "STRING"
            },
            "query_parameters": {
              "type": "STRING"
            },
            "show_all_candidate_models": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "arima_evaluation_metrics": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "gcp_resources": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-bigquery-query-job": {
        "executorLabel": "exec-bigquery-query-job",
        "inputDefinitions": {
          "parameters": {
            "encryption_spec_key_name": {
              "type": "STRING"
            },
            "job_configuration_query": {
              "type": "STRING"
            },
            "labels": {
              "type": "STRING"
            },
            "location": {
              "type": "STRING"
            },
            "project": {
              "type": "STRING"
            },
            "query": {
              "type": "STRING"
            },
            "query_parameters": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "destination_table": {
              "artifactType": {
                "schemaTitle": "google.BQTable",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "gcp_resources": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-condition-avg-mae-good-1": {
        "dag": {
          "tasks": {
            "bigquery-create-model-job-2": {
              "cachingOptions": {
                "enableCache": true
              },
              "componentRef": {
                "name": "comp-bigquery-create-model-job-2"
              },
              "inputs": {
                "parameters": {
                  "job_configuration_query": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "{}"
                      }
                    }
                  },
                  "labels": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "{}"
                      }
                    }
                  },
                  "location": {
                    "componentInputParameter": "pipelineparam--location"
                  },
                  "pipelineparam--bq_dataset": {
                    "componentInputParameter": "pipelineparam--bq_dataset"
                  },
                  "pipelineparam--bq_model_table": {
                    "componentInputParameter": "pipelineparam--bq_model_table"
                  },
                  "pipelineparam--bq_orders_table": {
                    "componentInputParameter": "pipelineparam--bq_orders_table"
                  },
                  "pipelineparam--project": {
                    "componentInputParameter": "pipelineparam--project"
                  },
                  "project": {
                    "componentInputParameter": "pipelineparam--project"
                  },
                  "query": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "\n        -- create model table\n        CREATE OR REPLACE MODEL `{{$.inputs.parameters['pipelineparam--project']}}.{{$.inputs.parameters['pipelineparam--bq_dataset']}}.{{$.inputs.parameters['pipelineparam--bq_model_table']}}`\n        OPTIONS(\n        MODEL_TYPE = 'ARIMA_PLUS',\n        TIME_SERIES_TIMESTAMP_COL = 'hourly_timestamp',\n        TIME_SERIES_DATA_COL = 'total_sold',\n        TIME_SERIES_ID_COL = ['product_name'],\n        MODEL_REGISTRY = 'vertex_ai',\n        VERTEX_AI_MODEL_ID = 'order_demand_forecasting',\n        VERTEX_AI_MODEL_VERSION_ALIASES = ['staging']\n        ) AS\n        SELECT\n          DATETIME_TRUNC(time_of_sale, HOUR) as hourly_timestamp,\n          product_name,\n          SUM(quantity) AS total_sold,\n          FROM `{{$.inputs.parameters['pipelineparam--project']}}.{{$.inputs.parameters['pipelineparam--bq_dataset']}}.{{$.inputs.parameters['pipelineparam--bq_orders_table']}}`\n        GROUP BY hourly_timestamp, product_name;\n        "
                      }
                    }
                  },
                  "query_parameters": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "[]"
                      }
                    }
                  }
                }
              },
              "taskInfo": {
                "name": "train arima+ model"
              }
            },
            "bigquery-explain-forecast-model-job": {
              "cachingOptions": {
                "enableCache": true
              },
              "componentRef": {
                "name": "comp-bigquery-explain-forecast-model-job"
              },
              "dependentTasks": [
                "bigquery-create-model-job-2",
                "bigquery-forecast-model-job"
              ],
              "inputs": {
                "artifacts": {
                  "model": {
                    "taskOutputArtifact": {
                      "outputArtifactKey": "model",
                      "producerTask": "bigquery-create-model-job-2"
                    }
                  }
                },
                "parameters": {
                  "confidence_level": {
                    "runtimeValue": {
                      "constantValue": {
                        "doubleValue": 0.9
                      }
                    }
                  },
                  "horizon": {
                    "runtimeValue": {
                      "constantValue": {
                        "intValue": "1"
                      }
                    }
                  },
                  "job_configuration_query": {
                    "componentInputParameter": "pipelineparam--bq_explain_forecast_configuration"
                  },
                  "labels": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "{}"
                      }
                    }
                  },
                  "location": {
                    "componentInputParameter": "pipelineparam--location"
                  },
                  "project": {
                    "componentInputParameter": "pipelineparam--project"
                  },
                  "query_parameters": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "[]"
                      }
                    }
                  }
                }
              },
              "taskInfo": {
                "name": "explain hourly forecasts"
              }
            },
            "bigquery-forecast-model-job": {
              "cachingOptions": {
                "enableCache": true
              },
              "componentRef": {
                "name": "comp-bigquery-forecast-model-job"
              },
              "dependentTasks": [
                "bigquery-create-model-job-2"
              ],
              "inputs": {
                "artifacts": {
                  "model": {
                    "taskOutputArtifact": {
                      "outputArtifactKey": "model",
                      "producerTask": "bigquery-create-model-job-2"
                    }
                  }
                },
                "parameters": {
                  "confidence_level": {
                    "runtimeValue": {
                      "constantValue": {
                        "doubleValue": 0.9
                      }
                    }
                  },
                  "horizon": {
                    "runtimeValue": {
                      "constantValue": {
                        "intValue": "1"
                      }
                    }
                  },
                  "job_configuration_query": {
                    "componentInputParameter": "pipelineparam--bq_forecast_configuration"
                  },
                  "labels": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "{}"
                      }
                    }
                  },
                  "location": {
                    "componentInputParameter": "pipelineparam--location"
                  },
                  "project": {
                    "componentInputParameter": "pipelineparam--project"
                  },
                  "query_parameters": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "[]"
                      }
                    }
                  }
                }
              },
              "taskInfo": {
                "name": "generate hourly forecasts"
              }
            }
          }
        },
        "inputDefinitions": {
          "parameters": {
            "pipelineparam--bq_dataset": {
              "type": "STRING"
            },
            "pipelineparam--bq_explain_forecast_configuration": {
              "type": "STRING"
            },
            "pipelineparam--bq_forecast_configuration": {
              "type": "STRING"
            },
            "pipelineparam--bq_model_table": {
              "type": "STRING"
            },
            "pipelineparam--bq_orders_table": {
              "type": "STRING"
            },
            "pipelineparam--get-model-evaluation-metrics-avg_mean_absolute_error": {
              "type": "DOUBLE"
            },
            "pipelineparam--location": {
              "type": "STRING"
            },
            "pipelineparam--project": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-get-model-evaluation-metrics": {
        "executorLabel": "exec-get-model-evaluation-metrics",
        "inputDefinitions": {
          "artifacts": {
            "metrics_in": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "metrics_out": {
              "artifactType": {
                "schemaTitle": "system.HTML",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "avg_mean_absolute_error": {
              "type": "DOUBLE"
            }
          }
        }
      }
    },
    "deploymentSpec": {
      "executors": {
        "exec-bigquery-create-model-job": {
          "container": {
            "args": [
              "--type",
              "BigqueryCreateModelJob",
              "--project",
              "{{$.inputs.parameters['project']}}",
              "--location",
              "{{$.inputs.parameters['location']}}",
              "--payload",
              "{\"configuration\": {\"query\": {{$.inputs.parameters['job_configuration_query']}}, \"labels\": {{$.inputs.parameters['labels']}}}}",
              "--job_configuration_query_override",
              "{\"query\": \"{{$.inputs.parameters['query']}}\", \"query_parameters\": {{$.inputs.parameters['query_parameters']}}}",
              "--gcp_resources",
              "{{$.outputs.parameters['gcp_resources'].output_file}}",
              "--executor_input",
              "{{$}}"
            ],
            "command": [
              "python3",
              "-u",
              "-m",
              "google_cloud_pipeline_components.container.v1.bigquery.create_model.launcher"
            ],
            "image": "gcr.io/ml-pipeline/google-cloud-pipeline-components:1.0.39"
          }
        },
        "exec-bigquery-create-model-job-2": {
          "container": {
            "args": [
              "--type",
              "BigqueryCreateModelJob",
              "--project",
              "{{$.inputs.parameters['project']}}",
              "--location",
              "{{$.inputs.parameters['location']}}",
              "--payload",
              "{\"configuration\": {\"query\": {{$.inputs.parameters['job_configuration_query']}}, \"labels\": {{$.inputs.parameters['labels']}}}}",
              "--job_configuration_query_override",
              "{\"query\": \"{{$.inputs.parameters['query']}}\", \"query_parameters\": {{$.inputs.parameters['query_parameters']}}}",
              "--gcp_resources",
              "{{$.outputs.parameters['gcp_resources'].output_file}}",
              "--executor_input",
              "{{$}}"
            ],
            "command": [
              "python3",
              "-u",
              "-m",
              "google_cloud_pipeline_components.container.v1.bigquery.create_model.launcher"
            ],
            "image": "gcr.io/ml-pipeline/google-cloud-pipeline-components:1.0.39"
          }
        },
        "exec-bigquery-evaluate-model-job": {
          "container": {
            "args": [
              "--type",
              "BigqueryEvaluateModelJob",
              "--project",
              "{{$.inputs.parameters['project']}}",
              "--location",
              "{{$.inputs.parameters['location']}}",
              "--model_name",
              "{{$.inputs.artifacts['model'].metadata['projectId']}}.{{$.inputs.artifacts['model'].metadata['datasetId']}}.{{$.inputs.artifacts['model'].metadata['modelId']}}",
              "--table_name",
              "{{$.inputs.parameters['table_name']}}",
              "--query_statement",
              "{{$.inputs.parameters['query_statement']}}",
              "--threshold",
              "{{$.inputs.parameters['threshold']}}",
              "--payload",
              "{\"configuration\": {\"query\": {{$.inputs.parameters['job_configuration_query']}}, \"labels\": {{$.inputs.parameters['labels']}}}}",
              "--job_configuration_query_override",
              "{\"query_parameters\": {{$.inputs.parameters['query_parameters']}}, \"destination_encryption_configuration\": {\"kmsKeyName\": \"\"}}",
              "--gcp_resources",
              "{{$.outputs.parameters['gcp_resources'].output_file}}",
              "--executor_input",
              "{{$}}"
            ],
            "command": [
              "python3",
              "-u",
              "-m",
              "google_cloud_pipeline_components.container.v1.bigquery.evaluate_model.launcher"
            ],
            "image": "gcr.io/ml-pipeline/google-cloud-pipeline-components:1.0.39"
          }
        },
        "exec-bigquery-explain-forecast-model-job": {
          "container": {
            "args": [
              "--type",
              "BigqueryExplainForecastModelJob",
              "--project",
              "{{$.inputs.parameters['project']}}",
              "--location",
              "{{$.inputs.parameters['location']}}",
              "--model_name",
              "{{$.inputs.artifacts['model'].metadata['projectId']}}.{{$.inputs.artifacts['model'].metadata['datasetId']}}.{{$.inputs.artifacts['model'].metadata['modelId']}}",
              "--horizon",
              "{{$.inputs.parameters['horizon']}}",
              "--confidence_level",
              "{{$.inputs.parameters['confidence_level']}}",
              "--payload",
              "{\"configuration\": {\"query\": {{$.inputs.parameters['job_configuration_query']}}, \"labels\": {{$.inputs.parameters['labels']}}}}",
              "--job_configuration_query_override",
              "{\"query_parameters\": {{$.inputs.parameters['query_parameters']}}, \"destination_encryption_configuration\": {\"kmsKeyName\": \"\"}}",
              "--gcp_resources",
              "{{$.outputs.parameters['gcp_resources'].output_file}}",
              "--executor_input",
              "{{$}}"
            ],
            "command": [
              "python3",
              "-u",
              "-m",
              "google_cloud_pipeline_components.container.v1.bigquery.explain_forecast_model.launcher"
            ],
            "image": "gcr.io/ml-pipeline/google-cloud-pipeline-components:1.0.39"
          }
        },
        "exec-bigquery-forecast-model-job": {
          "container": {
            "args": [
              "--type",
              "BigqueryMLForecastJob",
              "--project",
              "{{$.inputs.parameters['project']}}",
              "--location",
              "{{$.inputs.parameters['location']}}",
              "--model_name",
              "{{$.inputs.artifacts['model'].metadata['projectId']}}.{{$.inputs.artifacts['model'].metadata['datasetId']}}.{{$.inputs.artifacts['model'].metadata['modelId']}}",
              "--horizon",
              "{{$.inputs.parameters['horizon']}}",
              "--confidence_level",
              "{{$.inputs.parameters['confidence_level']}}",
              "--payload",
              "{\"configuration\": {\"query\": {{$.inputs.parameters['job_configuration_query']}}}}",
              "--job_configuration_query_override",
              "{\"query_parameters\": {{$.inputs.parameters['query_parameters']}}, \"destination_encryption_configuration\": {\"kmsKeyName\": \"\"}}",
              "--gcp_resources",
              "{{$.outputs.parameters['gcp_resources'].output_file}}",
              "--executor_input",
              "{{$}}"
            ],
            "command": [
              "python3",
              "-u",
              "-m",
              "google_cloud_pipeline_components.container.v1.bigquery.forecast_model.launcher"
            ],
            "image": "gcr.io/ml-pipeline/google-cloud-pipeline-components:1.0.39"
          }
        },
        "exec-bigquery-ml-arima-evaluate-job": {
          "container": {
            "args": [
              "--type",
              "BigqueryMLArimaEvaluateJob",
              "--project",
              "{{$.inputs.parameters['project']}}",
              "--location",
              "{{$.inputs.parameters['location']}}",
              "--model_name",
              "{{$.inputs.artifacts['model'].metadata['projectId']}}.{{$.inputs.artifacts['model'].metadata['datasetId']}}.{{$.inputs.artifacts['model'].metadata['modelId']}}",
              "--show_all_candidate_models",
              "{{$.inputs.parameters['show_all_candidate_models']}}",
              "--payload",
              "{\"configuration\": {\"query\": {{$.inputs.parameters['job_configuration_query']}}, \"labels\": {{$.inputs.parameters['labels']}}}}",
              "--job_configuration_query_override",
              "{\"query_parameters\": {{$.inputs.parameters['query_parameters']}}, \"destination_encryption_configuration\": {\"kmsKeyName\": \"\"}}",
              "--gcp_resources",
              "{{$.outputs.parameters['gcp_resources'].output_file}}",
              "--executor_input",
              "{{$}}"
            ],
            "command": [
              "python3",
              "-u",
              "-m",
              "google_cloud_pipeline_components.container.v1.bigquery.ml_arima_evaluate.launcher"
            ],
            "image": "gcr.io/ml-pipeline/google-cloud-pipeline-components:1.0.39"
          }
        },
        "exec-bigquery-query-job": {
          "container": {
            "args": [
              "--type",
              "BigqueryQueryJob",
              "--project",
              "{{$.inputs.parameters['project']}}",
              "--location",
              "{{$.inputs.parameters['location']}}",
              "--payload",
              "{\"configuration\": {\"query\": {{$.inputs.parameters['job_configuration_query']}}, \"labels\": {{$.inputs.parameters['labels']}}}}",
              "--job_configuration_query_override",
              "{\"query\": \"{{$.inputs.parameters['query']}}\", \"query_parameters\": {{$.inputs.parameters['query_parameters']}}, \"destination_encryption_configuration\": {\"kmsKeyName\": \"{{$.inputs.parameters['encryption_spec_key_name']}}\"}}",
              "--gcp_resources",
              "{{$.outputs.parameters['gcp_resources'].output_file}}",
              "--executor_input",
              "{{$}}"
            ],
            "command": [
              "python3",
              "-u",
              "-m",
              "google_cloud_pipeline_components.container.v1.bigquery.query_job.launcher"
            ],
            "image": "gcr.io/ml-pipeline/google-cloud-pipeline-components:1.0.39"
          }
        },
        "exec-get-model-evaluation-metrics": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "get_model_evaluation_metrics"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'jinja2' 'pandas' 'matplotlib' 'kfp==1.8.19' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef get_model_evaluation_metrics(\n    metrics_in: Input[Artifact], metrics_out: Output[HTML]\n) -> NamedTuple(\"Outputs\", [(\"avg_mean_absolute_error\", float)]):\n    \"\"\"\n    Get the average mean absolute error from the metrics\n    Args:\n        metrics_in: metrics artifact\n        metrics_out: metrics artifact\n    Returns:\n        avg_mean_absolute_error: average mean absolute error\n    \"\"\"\n\n    import pandas as pd\n\n    # Helpers\n    def prettyfier(styler):\n        \"\"\"\n        Helper function to prettify the metrics table.\n        Args:\n            styler: Styler object\n        Returns:\n            Styler object\n        \"\"\"\n        caption = {\n            \"selector\": \"caption\",\n            \"props\": [\n                (\"caption-side\", \"top\"),\n                (\"font-size\", \"150%\"),\n                (\"font-weight\", \"bold\"),\n                (\"font-family\", \"arial\"),\n            ],\n        }\n        headers = {\n            \"selector\": \"th\",\n            \"props\": [(\"color\", \"black\"), (\"font-family\", \"arial\")],\n        }\n        rows = {\n            \"selector\": \"td\",\n            \"props\": [(\"text-align\", \"center\"), (\"font-family\", \"arial\")],\n        }\n        styler.set_table_styles([caption, headers, rows])\n        styler.set_caption(\"Forecasting accuracy report <br><br>\")\n        styler.hide(axis=\"index\")\n        styler.format(precision=2)\n        styler.background_gradient(cmap=\"Blues\")\n        return styler\n\n    def get_column_names(header):\n        \"\"\"\n        Helper function to get the column names from the metrics table.\n        Args:\n            header: header\n        Returns:\n            column_names: column names\n        \"\"\"\n        header_clean = header.replace(\"_\", \" \")\n        header_abbrev = \"\".join([h[0].upper() for h in header_clean.split()])\n        header_prettied = f\"{header_clean} ({header_abbrev})\"\n        return header_prettied\n\n    # Extract rows and schema from metrics artifact\n    rows = metrics_in.metadata[\"rows\"]\n    schema = metrics_in.metadata[\"schema\"]\n\n    # Convert into a tabular format\n    columns = [metrics[\"name\"] for metrics in schema[\"fields\"] if \"name\" in metrics]\n    records = []\n    for row in rows:\n        records.append([dl[\"v\"] for dl in row[\"f\"]])\n    metrics = (\n        pd.DataFrame.from_records(records, columns=columns, index=\"product_name\")\n        .astype(float)\n        .round(3)\n    )\n    metrics = metrics.reset_index()\n\n    # Create the HTML artifact for the metrics\n    pretty_columns = list(\n        map(\n            lambda h: get_column_names(h)\n            if h != columns[0]\n            else h.replace(\"_\", \" \").capitalize(),\n            columns,\n        )\n    )\n    pretty_metrics = metrics.copy()\n    pretty_metrics.columns = pretty_columns\n    html_metrics = pretty_metrics.style.pipe(prettyfier).to_html()\n    with open(metrics_out.path, \"w\") as f:\n        f.write(html_metrics)\n\n    # Create metrics dictionary for the model\n    avg_mean_absolute_error = round(float(metrics.mean_absolute_error.mean()), 0)\n    component_outputs = NamedTuple(\"Outputs\", [(\"avg_mean_absolute_error\", float)])\n\n    return component_outputs(avg_mean_absolute_error)\n\n"
            ],
            "image": "python:3.8-slim"
          }
        }
      }
    },
    "pipelineInfo": {
      "name": "bqml-forecast-pipeline"
    },
    "root": {
      "dag": {
        "tasks": {
          "bigquery-create-model-job": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-bigquery-create-model-job"
            },
            "dependentTasks": [
              "bigquery-query-job"
            ],
            "inputs": {
              "parameters": {
                "job_configuration_query": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "{}"
                    }
                  }
                },
                "labels": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "{}"
                    }
                  }
                },
                "location": {
                  "componentInputParameter": "location"
                },
                "pipelineparam--bq_dataset": {
                  "componentInputParameter": "bq_dataset"
                },
                "pipelineparam--bq_model_table": {
                  "componentInputParameter": "bq_model_table"
                },
                "pipelineparam--bq_training_table": {
                  "componentInputParameter": "bq_training_table"
                },
                "pipelineparam--project": {
                  "componentInputParameter": "project"
                },
                "project": {
                  "componentInputParameter": "project"
                },
                "query": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "\n        -- create model table\n        CREATE OR REPLACE MODEL `{{$.inputs.parameters['pipelineparam--project']}}.{{$.inputs.parameters['pipelineparam--bq_dataset']}}.{{$.inputs.parameters['pipelineparam--bq_model_table']}}`\n        OPTIONS(\n        MODEL_TYPE = 'ARIMA_PLUS',\n        TIME_SERIES_TIMESTAMP_COL = 'hourly_timestamp',\n        TIME_SERIES_DATA_COL = 'total_sold',\n        TIME_SERIES_ID_COL = ['product_name']\n        ) AS\n        SELECT\n          hourly_timestamp,\n          product_name,\n          total_sold\n        FROM `{{$.inputs.parameters['pipelineparam--project']}}.{{$.inputs.parameters['pipelineparam--bq_dataset']}}.{{$.inputs.parameters['pipelineparam--bq_training_table']}}`\n        WHERE split='TRAIN';\n        "
                    }
                  }
                },
                "query_parameters": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "[]"
                    }
                  }
                }
              }
            },
            "taskInfo": {
              "name": "run arima+ model experiment"
            }
          },
          "bigquery-evaluate-model-job": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-bigquery-evaluate-model-job"
            },
            "dependentTasks": [
              "bigquery-create-model-job"
            ],
            "inputs": {
              "artifacts": {
                "model": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "model",
                    "producerTask": "bigquery-create-model-job"
                  }
                }
              },
              "parameters": {
                "job_configuration_query": {
                  "componentInputParameter": "bq_evaluate_model_configuration"
                },
                "labels": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "[]"
                    }
                  }
                },
                "location": {
                  "componentInputParameter": "location"
                },
                "pipelineparam--bq_dataset": {
                  "componentInputParameter": "bq_dataset"
                },
                "pipelineparam--bq_training_table": {
                  "componentInputParameter": "bq_training_table"
                },
                "pipelineparam--project": {
                  "componentInputParameter": "project"
                },
                "project": {
                  "componentInputParameter": "project"
                },
                "query_parameters": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "[]"
                    }
                  }
                },
                "query_statement": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "SELECT * FROM `{{$.inputs.parameters['pipelineparam--project']}}.{{$.inputs.parameters['pipelineparam--bq_dataset']}}.{{$.inputs.parameters['pipelineparam--bq_training_table']}}` WHERE split='TEST'"
                    }
                  }
                },
                "table_name": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": ""
                    }
                  }
                },
                "threshold": {
                  "runtimeValue": {
                    "constantValue": {
                      "doubleValue": -1.0
                    }
                  }
                }
              }
            },
            "taskInfo": {
              "name": "evaluate arima plus model"
            }
          },
          "bigquery-ml-arima-evaluate-job": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-bigquery-ml-arima-evaluate-job"
            },
            "dependentTasks": [
              "bigquery-create-model-job"
            ],
            "inputs": {
              "artifacts": {
                "model": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "model",
                    "producerTask": "bigquery-create-model-job"
                  }
                }
              },
              "parameters": {
                "job_configuration_query": {
                  "componentInputParameter": "bq_evaluate_time_series_configuration"
                },
                "labels": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "[]"
                    }
                  }
                },
                "location": {
                  "componentInputParameter": "location"
                },
                "project": {
                  "componentInputParameter": "project"
                },
                "query_parameters": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "[]"
                    }
                  }
                },
                "show_all_candidate_models": {
                  "runtimeValue": {
                    "constantValue": {
                      "intValue": "0"
                    }
                  }
                }
              }
            },
            "taskInfo": {
              "name": "evaluate arima plus time series"
            }
          },
          "bigquery-query-job": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-bigquery-query-job"
            },
            "inputs": {
              "parameters": {
                "encryption_spec_key_name": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": ""
                    }
                  }
                },
                "job_configuration_query": {
                  "componentInputParameter": "bq_train_configuration"
                },
                "labels": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "{}"
                    }
                  }
                },
                "location": {
                  "componentInputParameter": "location"
                },
                "pipelineparam--bq_dataset": {
                  "componentInputParameter": "bq_dataset"
                },
                "pipelineparam--bq_orders_table": {
                  "componentInputParameter": "bq_orders_table"
                },
                "pipelineparam--project": {
                  "componentInputParameter": "project"
                },
                "project": {
                  "componentInputParameter": "project"
                },
                "query": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "\n        -- create the training table\n        WITH \n        -- get 90% percentile for time series splitting\n        get_split AS (\n          SELECT APPROX_QUANTILES(DATETIME_TRUNC(time_of_sale, HOUR), 100)[OFFSET(90)] as split\n          FROM `{{$.inputs.parameters['pipelineparam--project']}}.{{$.inputs.parameters['pipelineparam--bq_dataset']}}.{{$.inputs.parameters['pipelineparam--bq_orders_table']}}`\n        ),\n        -- get train table\n        get_train AS (\n          SELECT\n            DATETIME_TRUNC(time_of_sale, HOUR) as hourly_timestamp,\n            product_name,\n            SUM(quantity) AS total_sold,\n            FROM `{{$.inputs.parameters['pipelineparam--project']}}.{{$.inputs.parameters['pipelineparam--bq_dataset']}}.{{$.inputs.parameters['pipelineparam--bq_orders_table']}}`\n        GROUP BY hourly_timestamp, product_name\n        )\n        SELECT\n          *,\n          CASE WHEN hourly_timestamp < (SELECT split FROM get_split) THEN 'TRAIN' ELSE 'TEST' END AS split\n        FROM get_train\n        ORDER BY hourly_timestamp\n        "
                    }
                  }
                },
                "query_parameters": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "[]"
                    }
                  }
                }
              }
            },
            "taskInfo": {
              "name": "get train data"
            }
          },
          "condition-avg. mae good-1": {
            "componentRef": {
              "name": "comp-condition-avg-mae-good-1"
            },
            "dependentTasks": [
              "get-model-evaluation-metrics"
            ],
            "inputs": {
              "parameters": {
                "pipelineparam--bq_dataset": {
                  "componentInputParameter": "bq_dataset"
                },
                "pipelineparam--bq_explain_forecast_configuration": {
                  "componentInputParameter": "bq_explain_forecast_configuration"
                },
                "pipelineparam--bq_forecast_configuration": {
                  "componentInputParameter": "bq_forecast_configuration"
                },
                "pipelineparam--bq_model_table": {
                  "componentInputParameter": "bq_model_table"
                },
                "pipelineparam--bq_orders_table": {
                  "componentInputParameter": "bq_orders_table"
                },
                "pipelineparam--get-model-evaluation-metrics-avg_mean_absolute_error": {
                  "taskOutputParameter": {
                    "outputParameterKey": "avg_mean_absolute_error",
                    "producerTask": "get-model-evaluation-metrics"
                  }
                },
                "pipelineparam--location": {
                  "componentInputParameter": "location"
                },
                "pipelineparam--project": {
                  "componentInputParameter": "project"
                }
              }
            },
            "taskInfo": {
              "name": "condition-avg. mae good-1"
            },
            "triggerPolicy": {
              "condition": "inputs.parameters['pipelineparam--get-model-evaluation-metrics-avg_mean_absolute_error'].double_value < 3000"
            }
          },
          "get-model-evaluation-metrics": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-get-model-evaluation-metrics"
            },
            "dependentTasks": [
              "bigquery-evaluate-model-job"
            ],
            "inputs": {
              "artifacts": {
                "metrics_in": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "evaluation_metrics",
                    "producerTask": "bigquery-evaluate-model-job"
                  }
                }
              }
            },
            "taskInfo": {
              "name": "plot evaluation metrics"
            }
          }
        }
      },
      "inputDefinitions": {
        "parameters": {
          "bq_dataset": {
            "type": "STRING"
          },
          "bq_evaluate_model_configuration": {
            "type": "STRING"
          },
          "bq_evaluate_time_series_configuration": {
            "type": "STRING"
          },
          "bq_explain_forecast_configuration": {
            "type": "STRING"
          },
          "bq_forecast_configuration": {
            "type": "STRING"
          },
          "bq_model_table": {
            "type": "STRING"
          },
          "bq_orders_table": {
            "type": "STRING"
          },
          "bq_train_configuration": {
            "type": "STRING"
          },
          "bq_training_table": {
            "type": "STRING"
          },
          "location": {
            "type": "STRING"
          },
          "performance_threshold": {
            "type": "DOUBLE"
          },
          "project": {
            "type": "STRING"
          }
        }
      }
    },
    "schemaVersion": "2.0.0",
    "sdkVersion": "kfp-1.8.19"
  },
  "runtimeConfig": {
    "parameters": {
      "bq_dataset": {
        "stringValue": "fast_fresh"
      },
      "bq_evaluate_model_configuration": {
        "stringValue": "{\"destinationTable\": {\"datasetId\": \"fast_fresh\", \"projectId\": \"hybrid-vertex\", \"tableId\": \"orders_arima_model_evaluate_fj89gje6\"}, \"writeDisposition\": \"WRITE_TRUNCATE\"}"
      },
      "bq_evaluate_time_series_configuration": {
        "stringValue": "{\"destinationTable\": {\"datasetId\": \"fast_fresh\", \"projectId\": \"hybrid-vertex\", \"tableId\": \"orders_arima_time_series_evaluate_fj89gje6\"}, \"writeDisposition\": \"WRITE_TRUNCATE\"}"
      },
      "bq_explain_forecast_configuration": {
        "stringValue": "{\"destinationTable\": {\"datasetId\": \"fast_fresh\", \"projectId\": \"hybrid-vertex\", \"tableId\": \"orders_arima_explain_forecast_fj89gje6\"}, \"writeDisposition\": \"WRITE_TRUNCATE\"}"
      },
      "bq_forecast_configuration": {
        "stringValue": "{\"destinationTable\": {\"datasetId\": \"fast_fresh\", \"projectId\": \"hybrid-vertex\", \"tableId\": \"orders_arima_forecast_fj89gje6\"}, \"writeDisposition\": \"WRITE_TRUNCATE\"}"
      },
      "bq_model_table": {
        "stringValue": "orders_forecast_arima_fj89gje6"
      },
      "bq_orders_table": {
        "stringValue": "orders_fj89gje6"
      },
      "bq_train_configuration": {
        "stringValue": "{\"destinationTable\": {\"datasetId\": \"fast_fresh\", \"projectId\": \"hybrid-vertex\", \"tableId\": \"orders_training_fj89gje6\"}, \"writeDisposition\": \"WRITE_TRUNCATE\"}"
      },
      "bq_training_table": {
        "stringValue": "orders_training_fj89gje6"
      },
      "location": {
        "stringValue": "us"
      },
      "performance_threshold": {
        "doubleValue": 3000.0
      },
      "project": {
        "stringValue": "hybrid-vertex"
      }
    }
  }
}